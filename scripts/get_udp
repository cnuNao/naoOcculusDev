#!/usr/local/bin/node

/**
 * get_udp - Receives udp stream from a remote source. 
 * Parses as array of 8-bit integers and streams to client
 * as base64-encoded image data.
 */

var io 		= require('socket.io');
var socket 	= require('dgram').createSocket('udp4');
var http 	= require('http');
var fs 		= require('fs');

var clients = [];

// bind socket
socket.bind(3000, '0.0.0.0', function() {
	console.log('status> udp socket connection established.');
});

socket.on('listening', function() {
	console.log('status> socket listening on port 3000');
});

socket.on('close', function() {
	console.log('status> socket connection closed.');
});

socket.on('error', function(error) {
	console.log('status> error connecting to socket -> ' + error.toString());
});

/**
* gets a message to be displayed and drops the packets if they do not contain enough data 
*/
socket.on('message', function(message) {

	// encode array buffer into base64
	var bytes 		= new Uint8Array(message);
	var enc_bytes 	= encode(bytes);

	if(bytes.length > 100) {

		for(var i = 0; i < clients.length; i++) {
			clients[i].emit('packet', { data: enc_bytes });
		}
	}

});

/**
*creates the server on which the images will be displayed on
*/
var server = http.createServer(function(request, response) {

	// response.writeHead(200, { 'Content-Type': 'image/jpeg' });
	fs.readFile(__dirname + '/index.html', function(err, data) {
		if(err) {
			return response.end('Error parsing index.html -> ' + err.toString());
		}

		response.writeHead(200, { 'Content-type': 'text/html' });
		response.end(data);
	});

});

server.listen(8000);

io.listen(server).on('connection', function(client) {
	clients.push(client);
});

// public method for encoding an Uint8Array to base64
function encode (input) {
    var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var output = "";
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var i = 0;

    while (i < input.length) {
        chr1 = input[i++];
        chr2 = i < input.length ? input[i++] : Number.NaN; // Not sure if the index 
        chr3 = i < input.length ? input[i++] : Number.NaN; // checks are needed here

        enc1 = chr1 >> 2;
        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        enc4 = chr3 & 63;

        if (isNaN(chr2)) {
            enc3 = enc4 = 64;
        } else if (isNaN(chr3)) {
            enc4 = 64;
        }
        output += keyStr.charAt(enc1) + keyStr.charAt(enc2) +
                  keyStr.charAt(enc3) + keyStr.charAt(enc4);
    }
    return output;
}
